# 에러 메시지
#required.item.itemName=상품 이름은 필수입니다.
#range.item.price=가격은 {0} ~ {1} 까지 허용합니다.
#max.item.quantity=수량은 최대 {0} 까지 허용합니다.
#totalPriceMin=가격 * 수량의 합은 {0}원 이상이어야 합니다. 현재 값 = {1}

# errors_en.properties 를 생성하면 국제화 처리도 가능하다.

# 오류코드 관리 전략
# 핵심은 구체적인 것에서 덜 구체적인 것으로
# MessageCodesResolver 는 required.item.itemName 처럼 구체적인 것을 먼저 만들어주고,
# required 처럼 덜 구체적인 것을 가장 나중에 만들어 준다.
# 즉, 크게 중요하지 않은 메시지는 범용성 있는 required 같은 메시지로 끝내고,
# 중요한 메시지는 구체적인 내용을 정의하는 방식이 효과적이다.


#==ObjectError== 객체에러 : 2단계

#Level1
totalPriceMin.item=상품의 가격 * 수량의 합은 {0}원 이상이어야 합니다. 현재 값 = {1}

#Level2 - 생략
totalPriceMin=전체 가격은 {0}원 이상이어야 합니다. 현재 값 = {1}


#==FieldError== 필드에러 : 4단계

#Level1
required.item.itemName=상품 이름은 필수입니다.
range.item.price=가격은 {0} ~ {1} 까지 허용합니다.
max.item.quantity=수량은 최대 {0} 까지 허용합니다.

#Level2 - 생략

#Level3
required.java.lang.String = 필수 문자입니다.
required.java.lang.Integer = 필수 숫자입니다.
min.java.lang.String = {0} 이상의 문자를 입력해주세요.
min.java.lang.Integer = {0} 이상의 숫자를 입력해주세요.
range.java.lang.String = {0} ~ {1} 까지의 문자를 입력해주세요.
range.java.lang.Integer = {0} ~ {1} 까지의 숫자를 입력해주세요.
max.java.lang.String = {0} 까지의 문자를 허용합니다.
max.java.lang.Integer = {0} 까지의 숫자를 허용합니다.

#Level4
required = 필수 값 입니다.
min= {0} 이상이어야 합니다.
range= {0} ~ {1} 범위를 허용합니다.
max= {0} 까지 허용합니다.

# itemName 의 경우 required 검증 오류 메시지가 발생하면 다음 코드 순서대로 메시지가 생성된다.
# level1 : required.item.itemName
# level2 : required.itemNmae
# level3 : required.java.lang.String
# level4 : required
# 이러한 우선순위 순서대로 MessageSource 에서 메시지를 찾는다. (구체적 -> 덜 구체적인 순서)
# 즉, 이렇게 함으로써 크게 중요하지 않은 에러 메시지는 기존에 정의된 메시지를 재활용 할 수 있다.

#타입에러 정보추가
typeMismatch.java.lang.Integer=숫자를 입력해주세요.
typeMismatch=타입 오류입니다.

#Bean Validation 추가
NotBlank={0} 공백X
Range={0}, {2} ~ {1} 허용
Max={0}, 최대 {1}